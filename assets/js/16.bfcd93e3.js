(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{282:function(t,_,e){"use strict";e.r(_);var s=e(13),v=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[t._v("#")]),t._v(" 1. 前言")]),t._v(" "),_("p",[t._v("在日常工作偶尔会遇到数据很大的情况 这样就会导致加载页面的时候页面会卡住半天 为了解决这样情况 一般都会采用分页的情况 这也是常见的处理数据的办法 还有一种是无限滚动 但是这两种办法各有相应的缺点")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("分页加载")]),t._v("：分页加载常见的就是表格List页面配合后端采用分页加载的方式 但是有些场景是没有后台配合的情况 这样就需要前台做个静态分页 原理就是利用数组切割的方式 但是数据过多的时候 大概率还是需要渲染非常多的元素")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("无限滚动")]),t._v("：该方案是承受容器可视范围内的数据量 当滚动条接近底部的时候 再去追加下一批需要渲染的数据 该方案最明显的缺点就是 无限滚动下去必然触及浏览器性能瓶颈 因为随着渲染的元素越来越多 性能也会越来越差")])])]),t._v(" "),_("p",[t._v("这时候就孕育而出 "),_("code",[t._v("虚拟滚动")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("虚拟滚动")]),t._v("：该方案就是计算可视范围内的所承载的数据量 每次滚动保证元素数量是可控的 每次只展示可视范围内的数据量 这样既不怕分页一次加载数据过多 也不必担心无限滚动出现数据堆积的情况")])])])}),[],!1,null,null,null);_.default=v.exports}}]);